<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0031)http://psdraw.narod.ru/les7.htm -->
<HTML><HEAD><TITLE>Язык программирования PostScript: Урок 7</TITLE><LINK 
href="les7_files/main.css" type=text/css rel=STYLESHEET>
<META http-equiv=Content-Type content="text/html; CHARSET=Windows-1251">
<META 
content="PostScript программирование рисование печать язык программирования DPS lang .ps создание" 
name=Keywords>
<META content="MSHTML 6.00.2800.1528" name=GENERATOR></HEAD>
<BODY topMargin=10>
<TABLE borderColor=#c6c6c6 cellSpacing=3 width="100%" border=1>
  <TBODY>
  <TR bgColor=black>
    <TD vAlign=top align=left width="20%">
      <P class=level0><A href="http://psdraw.narod.ru/index.htm">Новости</A>
      <P class=level0><A href="http://psdraw.narod.ru/main.htm">О проекте</A>
      <P class=level0><A href="http://psdraw.narod.ru/why.htm">Зачем?</A>
      <P class=level0><A href="http://psdraw.narod.ru/soft.htm">Используемое 
      ПО</A>
      <P class=level0><A href="http://psdraw.narod.ru/metoda.htm">Методика 
      разработки сцен на PostScript</A>
      <P class=level0><A href="http://psdraw.narod.ru/stnd.htm">Операторы языка 
      PostScript</A>
      <P class=level0><A href="http://psdraw.narod.ru/lib.htm">Библиотека</A>
      <P class=level0><A href="http://psdraw.narod.ru/les.htm">Изучение 
языка</A>
      <P class=level1><A href="http://psdraw.narod.ru/les1.htm">Урок 1</A>
      <P class=level1><A href="http://psdraw.narod.ru/les2.htm">Урок 2</A>
      <P class=level1><A href="http://psdraw.narod.ru/les3.htm">Урок 3</A>
      <P class=level1><A href="http://psdraw.narod.ru/les4.htm">Урок 4</A>
      <P class=level1><A href="http://psdraw.narod.ru/les5.htm">Урок 5</A>
      <P class=level1><A href="http://psdraw.narod.ru/les6.htm">Урок 6</A>
      <P class=level1>Урок 7
      <P class=level0><A href="http://psdraw.narod.ru/s_sss.htm">Статьи</A>
      <P class=level0><A 
      href="http://psdraw.narod.ru/links.htm">Ссылки...</A></P></TD>
    <TD vAlign=top>
      <H1>Занятие седьмое</H1>
      <H2>О работе с файлами</H2>
      <P>Отмечу, что здесь по сравнению с другими языками нет почти ничего 
      нового. В PostScript файл определяется как конечная последовательность 
      символов, заканчивающаяся маркером "конец файла". Нет разницы между 
      файлом, хранящимся на диске, и файлом, получаемым по линии связи или 
      генерируемым "на лету" каким-либо приложением. Различаются входные (input) 
      и выходные (output) файлы. Входные файлы служат для интерпретатора 
      PostScript источником исполняемых программ и они могут им читаться как 
      последовательность символов. При этом входной файл может быть закрыт явно 
      с помощью оператора <B>closefile</B>, либо неявно - при достижении маркера 
      конца файла. Файл - это один из объектов языка. Объект такого типа 
      создаётся с помощью оператора <B class=operator>file</B>. По существу это 
      обычное открытие файла. Кстати, существует ограничение на число 
      одновременно открытых файлов (зависит от ОС). <PRE class=example> имя_файла тип_доступа file -&gt; файл </PRE>
      <P>Аргумент <B>имя_файла</B> должен соответствовать соглашениям 
      операционной системы, в которой работает интерпретатор. В PostScript 
      существуют предопределённые имена файлов, такие как <B>%stdin</B> и 
      <B>%stdout</B>.<BR><B>Тип_доступа</B> задаётся одной из букв: 
      <UL>
        <LI>'<B>r</B>' - входной файл (только чтение); 
        <LI>'<B>w</B>' - выходной файл (только запись). </LI></UL>
      <P>Для удобства в языке есть несколько операторов чтения: <B>read</B>, 
      <B>readstring</B>, <B>readhexstring</B> и <B>readline</B>. 
      <P><B class=operator>read</B> проверяет есть ли в файле ещё непрочитанные 
      символы. Если нет (конец файла), закрывает файл и возвращает в стеке 
      <B>false</B>. В противном случае читает из файла следующий символ, 
      помещает его в стек, а затем, как признак успешной операции, помещает в 
      стек <B>true</B>. <PRE class=example>  файл read  -&gt; байт true (если не конец файла)
             -&gt; байт false (если конец файла)</PRE>
      <P><B class=operator>readline</B> читает из файла последовательность 
      символов, ограниченную символом конца строки, и сохраняет их в аргументе 
      строка (при этом сам терминатор строки туда не записывается). Если строка 
      заполнена раньше, чем встретился символ новой строки, возникает ошибка, 
      которая называется <B>rangecheck</B>. При успешном завершении операции 
      чтения в стеке возвращается также <B>true</B>, иначе - <B>false</B>. <PRE class=example> файл строка readline -&gt; подстрока true (если не конец файла)
                      -&gt; байт false (если конец файла)</PRE>
      <P>Так как изображение в PostScript часто кодируется как массив 16-ричных 
      чисел и, если оно достаточно большое, его неудобно держать внутри 
      программы, то считать его из файла поможет специальный оператор - <B 
      class=operator>readhexstring</B>. 
      <P>Он последовательно считывает 16-ричные цифры из файла проверяя их на 
      диапазон 0-9, A-F. Происходит последовательное формирование из двух цифр 
      одного байта и запоминание его в строке. При этом все символы типа 
      пробелов, табуляций и возвратов каретки игнорируются. Чтение 
      заканчивается, когда достигается конец файла. Ограничения на максимальную 
      длину строки накладываются операционной системой. Синтаксис как и у 
      оператора <B>readline</B>. 
      <P>Такой же синтаксис имеет и оператор <B class=operator>readstring</B>. 
      От <B>readline</B> он отличается только тем, что считанные символы 
      рассматриваются как целые числа в диапазоне от 0 до 255. Особо 
      рассматривается только символ новой строки. 
      <P>Информация о числе байтов, доступных для чтения в файле, возвращается 
      оператором <B class=operator>bytesavaiable</B>. Если результат равен 
      <B>-1</B>, достигнут конец файла. <PRE class=example> файл bytesavaiable   -&gt; число_байтов </PRE>
      <P><B class=operator>currentfile</B> возвращает объект типа <B>file</B>, 
      из которого интерпретатор PostScript читал наиболее недавно. <PRE class=example> currentfile          -&gt; файл</PRE>
      <P>Обычно возвращается стандартный файл ввода. Если не было чтения из 
      какого-либо файла, то оно производится из файла программы. При этом 
      указатель текущей позиции устанавливается после последнего считанного 
      интерпретатором слова (оператора или элемента данных). Данное свойство 
      используется для того, чтобы поместить в переменные текст или рисунок, 
      находящиеся непосредственно в программе. Это демонстрирует пример, взятый 
      из описания оператора: <PRE class=example>  /str 128 string def
  currentfile str readline  %% в стеке: (строка) true
   pop                      %% удалили true
  /text exch def     %% строку в переменную  </PRE>
      <P><B class=operator>closefile</B> разрывает связь между объектом типа 
      <B>file</B> и соответствующим ему реальным файлом. <PRE class=example> файл closefile       -&gt;  - </PRE>
      <P>Наконец, среди операторов ввода-вывода есть ещё ряд вспомогательных и 
      очевидных операторов типа <B class=operator>status</B>, <B 
      class=operator>flush</B>. 
      <H2>Соглашения по структуре программы</H2>
      <P>Язык PostScript не определяет общую структуру PostScript-программы, 
      однако существуют некоторые соглашения, облегчающие её структуризацию. Для 
      записи информации о программе используются комментарии специального вида. 
      Такой комментарий занимает строку целиком и начинается не с одного знака 
      процента, а с двух. Специальные комментарии делятся на три группы: 
      <U>заголовочные комментарии</U> (header comments), <U>комментарии тела 
      программы</U> (body comments) и <U>комментарии эпилога</U> (trailer 
      comments). 
      <P>Заголовочные комментарии предшествуют тексту программы. Комментарии 
      тела программы служат для разделения разных частей описания страницы. 
      Комментарии эпилога следуют после текста программы и дают о ней 
      дополнительную информацию. 
      <H3>Заголовочные комментарии</H3>
      <P>Некоторые из этих комментариев могут помещаться в конце программы по 
      усмотрению программиста или приложения, генерирующего PostScript-файл. <PRE class=example> %%DocumentFonts: шрифт1 шрифт2 ... </PRE>
      <P>где шрифт1 шрифт2 - имена PostScript-шрифтов, используемых в документе. 
      Данная информация может использоваться некоторыми утилитами, загружающими 
      шрифты в принтер до печати документа. Допускается указывать 
      (<B>atend</B>), означающее присутствие, ожидание или что-то в этом роде. <PRE class=example> %%Title: текст </PRE>
      <P>задаёт заголовок документа. текст - строка заголовка. <PRE class=example> %%Creator: имя_создателя</PRE>
      <P>содержит имя программиста (или программы), породившего данный текст. <PRE class=example> %%CreationDate: дата_и_время_создания
 %%For: текст</PRE>
      <P>указывает имя персоны, для которой был создан документ. Если 
      комментарий <B>%%For</B> пропущен, подразумевается автор документа, 
      указанный в <B>%%Creator</B>. <PRE class=example> %%Pages: страниц</PRE>
      <P>число страниц в документе (неотрицательное целое число), либо слово 
      (<B>atend</B>). <PRE class=example> %%BoundingBox: llx lly urx ury </PRE>
      <P>координаты левого нижнего и правого верхнего угла в системе координат 
      пользователя, либо слово (<B>atend</B>). <PRE class=example> %%EndComments </PRE>
      <P>завершает секцию заголовочных комментариев. 
      <P>Пример. <PRE class=example>%!PS-Adobe-2.1
%%Creator: Adobe Illustrator(TM) 3.2
%%For: (Eduard Projdakov) (PC Week/RE)
%%Title: (NewPS)
%%CreationDate: (2/10/97) (4:30 PM)
%%BoundingBox: 429 490 495 565
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments</PRE>
      <H3>Комментарии тела программы</H3><PRE class=example>%%EndProlog </PRE>
      <P>конец секции пролога программы. <PRE class=example>%%Page: метка порядковый_номер</PRE>
      <P>где <B>метка</B> - текст с названием страницы, а 
      <B>порядковый_номер</B> - номер страницы в многостраничном документе. <PRE class=example>%%PageFonts: шрифт1 шрифт2 ...</PRE>
      <P>задает список шрифтов, используемых для текущей страницы документа. <PRE class=example>%%Trailer </PRE>
      <P>отмечает конец тела программы и начало эпилога. 
      <H3>Комментарии эпилога</H3>
      <P>Эта секция состоит из комментариев типа <B>%%DocumentFonts</B>, 
      <B>%%Pages</B> и <B>%%BoundingBox</B>. 
      <H2>Операторы рисования</H2>
      <P>В языке PostScript в операторах рисования важно знать когда точка 
      считается внутренней по отношению к текущей траектории (отсечению), а 
      когда - внешней. Есть два правила определения внутренней точки: 
      чётный-нечётный и ненулевого поворота (on-zero winding). Оба правила 
      основываются на подсчете пересечений лучей из проверяемой точки с текущей 
      траекторией. 
      <P><B>Метод ненулевого поворота</B> заключается в следующем: из 
      проверяемой точки по всем направлениям рисуются лучи, а затем 
      анализируются места пересечения с сегментом траектории. Начиная со 
      счётчика равного нулю мы добавляем к нему единицу, если луч пересекает 
      траекторию слева направо, вычитаем единицы, если он пересекает её справа 
      налево. Если счётчик равен нулю, точка внешняя, иначе - внутренняя. 
      Правило не определяет, что происходит в случае, если луч проходит по 
      касательной или перпендикулярно к сегменту. 
      <P><B>Правило чётный-нечётный</B> отличается от предыдущего тем, что 
      подсчитывается просто число пересечений лучом сегментов траектории. Если 
      число чётное, точка внутри области. Если нечётное - внешняя. 
      <P>Для простых фигур результат применения каждого из правил совпадает. 
      Различие проявляется на более сложных фигурах. 
      <P><B class=operator>fill</B> заполняет текущим цветом область, 
      ограниченную текущей траекторией используя правило ненулевого поворота. 
      Любое предыдущее содержимое этой области на текущей странице теряется, 
      поэтому если заливка производится белым цветом, то это свойство может быть 
      использовано для очистки области . 
      <P>(Замечу, что страница целиком очищается с помощью не имеющего 
      аргументов оператора <B>erasepage</B>, который закрашивает её серым цветом 
      уровня <B>1</B>, не изменяя состояния графической среды. Этот оператор 
      выполняется также автоматически после оператора <B>showpage</B>.) <PRE class=example>  fill  -&gt;   - </PRE>
      <P>Перед рисованием <B>fill</B> явным образом закрывает любые открытые 
      подпути текущей траектории. Для её сохранения следует использовать 
      последовательность операторов <B>gsave fill grestore</B>. 
      <P>Для заливки области по правилу чётный-нечётный используется оператор 
      <B>eofill</B>. В остальном он полностью идентичен оператору <B>fill</B>. 
      <P><U>Задание.</U> Чтобы почувствовать разницу между двумя этими 
      правилами, нарисуйте с помощью PostScript две одинаковых пятиугольных 
      звезды (не убирая внутренние линии) и заполните их внутренние области с 
      помощью операторов <B>fill</B> и <B>eofill</B> соответственно. 
      <P>Для того, чтобы поместить графическое изображение на страницу, 
      используется оператор <B class=operator>image</B>. <PRE class=example>  <I>ширина высота бит/точка матрица процедура</I> image  -&gt;  -</PRE>
      <P>Изображение помещается в прямоугольную область размером <B>ширина</B> 
      на <B>высоту</B> точек, каждая из которых представлена значением из 
      <B>бит/точка</B> данных (1, 2, 4 или 8 битов на точку). Данные изображения 
      считываются как последовательность символов, причём, если точка кодируется 
      менее 8 битами, то данные упакованы в байте <U>слева направо</U>. 
      <P>Изображение на странице имеет свою <U>собственную систему 
      координат</U>, за начало которой (0,0) принят нижний левый угол 
      прямоугольной области изображения, а верхний правый угол имеет координаты 
      (ширина, высота). Операнд <B>матрица</B> задаёт преобразование из 
      пространства пользователя в систему координат изображения. 
      <P>Последний операнд (<B>процедура</B>) последовательно выполняется 
      оператором <B>image</B>, чтобы получить данные изображения. Обычно эти 
      данные читаются из файла с помощью оператора <B>readhexstring</B>. 
      <H2>Операторы поиска и другие полезные операторы</H2>
      <P><B class=operand>anchorsearch</B> определяет, совпадает ли начальная 
      подстрока <B>строки1</B> со <B>строкой2</B>. (в этом случае <B>строка1</B> 
      как минимум равна по длине <B>строке2</B> и соответствующие символы 
      совпадают). Если совпадает, то <B>строка1</B> разбивается на две подстроки 
      в одну из которых помещается совпавшая часть, а в другую остаток 
      <B>строки1</B>. <PRE class=example>  <I>строка1 строка2</I> anchorsearch -&gt; остаток совпавшая_часть true (если найдена)
                                         строка1 false (если не найдена) </PRE>
      <P>Примеры. <PRE class=example> (edward) (ed) anchorsearch -&gt; (ward) (ed) true
 (edward) (dw) anchorsearch -&gt; (edward) false </PRE>
      <P>Более общую форму поиска даёт оператор <B class=operator>search</B>. Он 
      позволяет найти первое вхождение <B>строки2</B> в <B>строку1</B>. 
      Результат поиска как и у <B>anchorsearch</B> возвращается в стеке 
      операндов. При этом в вершине стека находится результат операции 
      (<B>true</B> или <B>false</B>), а <B>строка1</B> разбивается на 3 
      сегмента: часть строки до совпавшей подстроки (pre), совпавшая подстрока 
      (match) и остаток строки (post). <PRE class=example> строка1 строка2 search -&gt; post match pre true (если найдена)
                           строка1 false (если не найдена)</PRE>
      <P>Примеры. <PRE class=example>  (edward) (ed) search -&gt; (ward) (ed) () true
  (edward) (dw) search -&gt; (ard) (dw) (e) true
  (edw) (W)     search -&gt; (edw) false </PRE>
      <P><B class=operator>reversepath</B> изменяет направление текущего пути. <PRE class=example>  reversepath  -&gt;  - </PRE>
      <P><B class=operator>pathbox</B> возвращает границы области текущего пути; 
<PRE class=example> pathbox      -&gt; llx lly urx ury</PRE>
      <P><B class=operator>currentpoint</B> возвращает координаты текущей точки. 
<PRE class=example> currentpoint -&gt; x y</PRE>
      <H2>PostScript Level 3</H2>
      <P>11 сентября 1996 г. фирма Adobe Systems объявила о выходе следующего 
      уровня языка PostScript. В PostScript Level 3, по заявлению фирмы, 
      улучшена производительность, функциональные возможности и качество. На 
      самом деле, предпринята попытка создать совокупность решений, покрывающих 
      очень широкую область применений: от домашних систем и малых офисов до 
      больших корпоративных сетей и Интернет. По заявлению представителя фирмы, 
      PostScript Level 3 это результат воздействия трёх тенденций рынка: 
      распространения Интернет, усиления использования цвета и перехода от 
      печати и дистрибуции к дистрибуции и печати по запросу. Учитывая, что 
      появилось много новых источников цифровых документов, например онлайновые 
      службы, intranet, цифровые камеры, электронная почта и т. д., а сами 
      документы становятся всё более сложными и предназначенными для печати в 
      любой точке планеты, создание нового уровня PostScript вполне закономерно. 
      Adobe предложила больше чем язык описания страниц для выпуска и печати 
      электронных документов. В Level 3 реализован ряд новых технологий: 
      Advanced Page Processing, Enhanced Image Technology, NetWorks System и 
      PlanetReady Printing. 
      <P>Технология <B>Enhanced Image Technology (EIT)</B> обеспечивает более 
      быструю, простую и качественную печать документов. Главное преимущество 
      для пользователя в том, что EIT распознаёт объекты изображения и 
      автоматически оптимизирует их обработку. Введена поддержка печати 
      трёхмерных изображений, изображений с фотографическим качеством и др. 
      <P>Технология <B>Advanced Page Processing (APP)</B> увеличивает 
      производительность системы обработки изображения. Так как компоненты 
      документа становятся более сложными печатающая система будет обрабатывать 
      каждую компоненту как отдельный объект, в последовательности 
      оптимизированной для повышения пропускной способности. PostScript Level 3 
      будет поддерживать обработку содержимого Web-узлов, включая работу с HTML- 
      и PDF-файлами. Чтобы обеспечить совместимость с основными операционными 
      системами и сократить время пересылки шрифтов в принтер, в APP расширен 
      также набор резидентных шрифтов. Кроме того, фирма Adobe интегрировала в 
      Level 3 поддержку формата PDF. 
      <P>Система <B>NetWorks System</B> упрощает использование и управление 
      принтером, подсоединённым к сети. Принтер с этой системой имеет свою 
      Web-страницу, базирующееся на Web управление, печать непосредственно с 
      Web-страницы принтера, поддержку всех промышленных стандартов на 
      технологию дистанционного управления и другие возможности. 
      <P>Технология <B>PlanetReady Printing</B>, реализованная, обеспечивает в 
      принтерах с PostScript Level 3 поддержку национальных языков. 
      <P>Adobe завершила разработку PostScript Level 3 и сейчас занимается его 
      внедрением. План-график выпуска продукта предусматривает два внутренних 
      цикла улучшения качества перед поставкой системы производителям принтеров 
      и партнерам, разрабатывающим ПО (начало поставок планировалось на декабрь 
      прошлого года). Во второй половине этого года, когда начнётся выпуск 
      продуктов, базирующихся на этой версии языка, фирма Adobe обещала 
      опубликовать описание PostScript Level 3. Подождём. Время бежит быстро. 
      <H2>Книги по PostScript фирмы Adobe Systems</H2>
      <P>Литературы по PostScript не так уж много. В основном это три 
      руководства, изданных (и переиздаваемые) фирмой Adobe в издательстве 
      Addison-Wesley Publishing. 
      <P>PostScript Language Program Design. ISBN 0-201-14396-8, 256 pp., 
      $24.95. 
      <P>PostScript Language Reference Manual, Second Edition. ISBN 
      0-201-18127-4, 784 pp., $32.95. 
      <P>PostScript Language Tutorial and Cookbook. ISBN 0-201-10179-3, 256 pp., 
      $21.95. Ее можете взять <A 
      href="http://psdraw.narod.ru/soft/bluebook.pdf">тут</A>. 
      <P>Возможно вам окажутся полезными ещё несколько книг: 
      <P>Programming the Display PostScript System with NEXTSTEP. ISBN 
      0-201-58135-3, 416 pp. $26.95. 
      <P>Programming the Display PostScript System with X. ISBN 0-201-62203-3, 
      624 pp. $29.95. 
      <P>Adobe Type 1 Font Format. ISBN 0-201-57044-0, 114 pp., $16.95. 
      <P>Portable Document Format Reference Manual: The Official Guide to the 
      File Format for Adobe Acrobat. ISBN 0-201-62628-4, 240 pp., $24.95 
      <P>Кроме печатных книг по языку, существует ряд полезных публикаций на 
      различных Web-узлах. Так, задав в поисковой системе строку "PostScript 
      Level 2" AND "David Burch", вы найдете в Интернет весьма полезный 
      справочник, составленный этим автором. 
      <H2>Вместо заключения</H2>
      <P>На этом заканчивается наш вводный курс в язык PostScript. Мы почти 
      полностью прошли PostScript Level 1 и чуть-чуть коснулись L2. Как всегда, 
      в конце работы видно, что её нужно было делать совсем не так. Конечно же, 
      к седьмому уроку автор уже сам почти всё понял ;). 
      <P class=date>26.11.2001 </P></TD></TR></TBODY></TABLE>
<CENTER>
<HR>

<HR width="50%">
©Фурашев А. 2002<BR><A href="mailto:psdraw@narod.ru">e-mail</A>
<HR width="25%">

<HR width="12%">
<!-- ><!-- "><!-- '><!-- --></TEXTAREA></FORM> </TITLE></COMMENT></A>
<DIV></DIV></SPAN></ILAYER></LAYER></IFRAME></NOFRAMES></STYLE></NOSCRIPT></TABLE></SCRIPT></APPLET></FONT>
<STYLE>#bn {
	DISPLAY: block
}
#bt {
	DISPLAY: block
}
</STYLE>

<SCRIPT language=JavaScript src="les7_files/163"></SCRIPT>
<!-- mailto:spm111@yandex.ru --></CENTER></BODY></HTML>
