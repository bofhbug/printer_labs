<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0031)http://psdraw.narod.ru/les1.htm -->
<HTML><HEAD><TITLE>Язык программирования PostScript: Урок 1</TITLE><LINK 
href="les1_files/main.css" type=text/css rel=STYLESHEET>
<META http-equiv=Content-Type content="text/html; CHARSET=Windows-1251">
<META 
content="PostScript программирование рисование печать язык программирования DPS lang .ps создание" 
name=Keywords>
<META content="MSHTML 6.00.2800.1528" name=GENERATOR></HEAD>
<BODY topMargin=10>
<TABLE borderColor=#c6c6c6 cellSpacing=3 width="100%" border=1>
  <TBODY>
  <TR bgColor=black>
    <TD vAlign=top align=left width="20%">
      <P class=level0><A href="http://psdraw.narod.ru/index.htm">Новости</A>
      <P class=level0><A href="http://psdraw.narod.ru/main.htm">О проекте</A>
      <P class=level0><A href="http://psdraw.narod.ru/why.htm">Зачем?</A>
      <P class=level0><A href="http://psdraw.narod.ru/soft.htm">Используемое 
      ПО</A>
      <P class=level0><A href="http://psdraw.narod.ru/metoda.htm">Методика 
      разработки сцен на PostScript</A>
      <P class=level0><A href="http://psdraw.narod.ru/stnd.htm">Операторы языка 
      PostScript</A>
      <P class=level0><A href="http://psdraw.narod.ru/lib.htm">Библиотека</A>
      <P class=level0><A href="http://psdraw.narod.ru/les.htm">Изучение 
языка</A>
      <P class=level1>Урок 1
      <P class=level1><A href="http://psdraw.narod.ru/les2.htm">Урок 2</A>
      <P class=level1><A href="http://psdraw.narod.ru/les3.htm">Урок 3</A>
      <P class=level1><A href="http://psdraw.narod.ru/les4.htm">Урок 4</A>
      <P class=level1><A href="http://psdraw.narod.ru/les5.htm">Урок 5</A>
      <P class=level1><A href="http://psdraw.narod.ru/les6.htm">Урок 6</A>
      <P class=level1><A href="http://psdraw.narod.ru/les7.htm">Урок 7</A>
      <P class=level0><A href="http://psdraw.narod.ru/s_sss.htm">Статьи</A>
      <P class=level0><A 
      href="http://psdraw.narod.ru/links.htm">Ссылки...</A></P></TD>
    <TD vAlign=top>
      <H1>Урок1</H1>
      <H2>Предисловие</H2>
      <P>Когда-то у меня было желание написать книгу, посвященную языкам 
      описания страниц (PDL). Начал я с языка <B>PostScript</B>, как наиболее 
      важного интересного в этой группе. Так в журнале <I>PC 
      Magazine/RE</I>&nbsp; появилась серия статей под названием "Семь уроков по 
      PostScript". К сожалению, их электронный вариант в редакции журнала не 
      сохранился, однако у меня остались предшествующие версии, которые 
      объединены в этом файле и предлагаются вашему вниманию. Утрачены тексты 
      некоторых примеров и картинки с результатами исполнения примеров. Так как, 
      похоже, что я из-за нехватки времени уже никогда не напишу задуманную 
      книгу, то... 
      <P>Этот текст может свободно использоваться, модифицироваться и 
      распространяться в любой форме. Автор же не несет за него ни малейшей 
      ответственности. </P>
      <H2>Занятие первое</H2>
      <P>Есть два подхода к описанию языка PostScript: как к обычному языку 
      программирования и как к языку описания страниц. В статье использован, в 
      основном, первый подход, поэтому предполагается, что читатель имеет хоть 
      какой-то опыт программирования.</P>
      <P>Язык PostScript был разработан Джоном Уорноком (John Warnock) в фирме 
      Adobe Systems в 1982 г. История создания языка описана в предисловии 
      одного из его авторов к "Справочному руководству по языку PostScript". 
      PostScript создавался в качестве простого стандартного языка для описания 
      вида текста, чертежей и простых изображений на печатаемой странице, что 
      наложило определенный отпечаток на используемые в PostScript конструкции. 
      Язык содержит около 250 операторов, что позволяет одни и те же действия 
      запрограммировать самыми разными способами. С другой стороны разработчики 
      не предполагали, что программы на PostScript будут большими, поэтому 
      средства структуризации в языке не сильно развиты. Треть языка PostScript 
      посвящена графике, остальное - это обычный процедурный язык 
      программирования, который включает в себя элементы из многих других 
      языков, но наиболее близок к языку Форт. Очень важно, что описание страниц 
      на PostScript не зависит от устройства, на котором страница будет 
      воспроизведена. Как правило программы на PostScript генерируются 
      приложениями, например текстовыми процессорами, программами для настольных 
      издательских систем, в частности CorelDrow, однако, как вы убедитесь сами, 
      в ряде случаев знание этого языка может быть весьма полезным.</P>
      <H2>Основные понятия</H2>
      <P>Одной из причин, вызвавшей появление и расцвет языка PostScript 
      является необходимость выводить текст и изображения на растровые внешние 
      устройства: матричные, струйные и лазерные принтеры, а также экраны 
      мониторов. Основное свойство таких устройств заключается в том, что 
      изображение на них строится из массива прямоугольных элементов, называемых 
      пикселами (от picture element - элемент изображения). Каждый пиксел имеет 
      в этом массиве свой адрес - номер строки и номер столбца, где он 
      расположен, а также цвет: у обычных матричных принтеров пикселы могут быть 
      либо черного цвета, либо белого (в этом случае их часто называют точками); 
      у лазерных принтеров пикселы имеют до 256 градаций серого цвета, у цветных 
      мониторов - до сотен тысяч цветов. Устанавливая определенные пикселы в 
      нужные цвета, мы получаем на экране текст и графические изображения.</P>
      <P>Так как у каждого растрового устройства пикселы имеют физические 
      размеры, зависящие, например, от размера печатающих иголок матричного 
      принтера или сетки на экране монитора, то число элементов изображения на 
      единицу длины (обычно дюйм) называется разрешением растрового выводного 
      устройства. В зависимости от этой характеристики устройства делятся на 
      устройства с низким, средним и высоким разрешением. Для лазерных принтеров 
      это соответственно до 300, 300-600 и более 600 dpi (точек на дюйм). Для 
      каждого типа устройств границы этих классов свои, так для 14" мониторов 
      разрешение более 50 dpi будет уже высоким. Чем выше разрешение, тем лучше 
      качество изображения.</P>
      <P><B>PostScript-устройство</B> (принтер, монитор) -- это устройство, в 
      котором имеется интерпретатор языка PostScript. Интерпретатор PostScript 
      принимает из компьютера текстовый файл с описанием страницы и преобразует 
      его в растровую форму, которая и выводится на печать или на экран. (С этим 
      и связана близкая к языку Форт структура PostScript -- она обеспечивает 
      наименьший размер интерпретатора). Во время преобразования описания 
      интерпретатор выполняет различные действия, зависящие от типа устройства. 
      Так если на черно-белое печатающее устройство выводится полутоновое 
      изображение, то интерпретатор PostScript этого устройство выполняет 
      разбиение полутоновых областей на зоны с определенным уровнем серого цвета 
      и заполняет каждую зону черными точками с плотностью, зависящей от этого 
      уровня, что создает иллюзию полутонов на результирующем изображении. </P>
      <P>Передача описания страницы по многим причинам более выгодна, чем 
      передача сразу всего массива составляющих страницу пикселов (растрового 
      образа страницы). Во-первых, описание во много раз компактнее даже сильно 
      сжатого изображения. Во-вторых, процесс подготовки печатной страницы 
      требует значительного времени: если пересылается описание, то подготовкой 
      к печати занимается процессор принтера или дисплейный процессор, что 
      освобождает процессор персонального компьютера (ПК) для выполнения другой 
      работы и тем самым повышает его производительность. И наконец, самое 
      важное преимущество - это независимость описания от типа устройства. </P>
      <P>(Однако с интерпретатором языка PostScript можно работать и на самом ПК 
      как работаем мы с Бейсиком или любым другим языком. Есть различные 
      реализации интерпретаторов PostScript, но лучше воспользоваться 
      общедоступной программой Gnostscript, работающей как под DOS, так и в 
      Windows. Её можно, в частности, поискать в Internet. ) </P>
      <P>Чтобы обеспечить независимость описания страницы от всего разнообразия 
      внешних растровых устройств в языке PostScript введено понятие текущей 
      страницы. </P>
      <P><B>Текущая страница</B> - "идеальная" страница в памяти, на которой 
      рисует PostScript. Она не зависит от физических характеристик принтера, на 
      который страница будет вводиться. В начале работы программы это совершенно 
      чистая страница. Когда текущая страница полностью описана, она посылается 
      на принтер, который распечатывает ее с таким качеством, которое способен 
      обеспечить. </P>
      <P><B>Текущий путь (current path)</B> - это набор соединенных между собой 
      отдельных точек, линий, кривых, которые вместе описывают фигуры и их 
      положение. На текущий путь не накладывается никаких ограничений (он может 
      пересекать сам себя и т. д.) Элементы текущего пути задаются их позициями 
      на текущей странице. </P>
      <P><B>Текущий путь обрезки (Current clipping path)</B> -- это границы 
      области, в которой может быть нарисовано изображение. 
      <P><B>Набор символов</B> Все виды скобок (круглые, квадратные, фигурные, 
      угловые) и знак процента являются для PostScript специальными знаками. 
      Остальные символы -- подмножество кода ASCII используются в программе без 
      ограничений и называются регулярными символами. 
      <P><B>Стек.</B> PostScript резервирует для обрабатываемых данных часть 
      памяти именуемую стеком. Данные, помещаемые в стек, извлекаются из него в 
      обратном порядке, т. е. последнее записанное туда число удаляется первым. 
      Такая дисциплина обслуживания называется LIFO. На самом деле PostScript 
      оперирует четырьмя различными стеками: операндов, словарей, выполнения и 
      состояния графики. 
      <P><B>Стек операндов</B> - содержит собственно объекты PostScript и 
      результаты действий над ними. Операторы PostScript получают операнды 
      только через стек. 
      <P><B>Типы данных.</B> Как и другие распространенные языки 
      программирования PostScript поддерживает различные типы данных, включая 
      integer, real, boolean, массивы и строки. В нём определяются также объекты 
      типа mark (отметка, метка) и dictionary (словарь). Примеры записи целых 
      чисел: <PRE class=example>  345  -87  38554  0  +57 </PRE>
      <P>Если величина числа превышает предел для представления целых чисел, оно 
      автоматически конвертируется интерпретатором в число типа real. Примеры 
      записи действительных чисел: <PRE class=example> -2.0  12.3  2E-5  0.0  345.6e8  -.025 </PRE>
      <P>Беззнаковые целые числа могут быть записаны в любой из 35 систем 
      счисления с использование префикса в виде: <PRE class=example>              база#число</PRE>
      <P>где: <BR><B>база</B> - основание системы счисления, десятичное целое 
      число от 2 до 36; <BR><B>число</B> - представление числа в системе в 
      указанной префиксом системе счисления. Цифры в системах счисления по 
      основанию больше 10 представляются буквами латинского алфавита от A до Z. 
      Например: <PRE class=example>       16#cb2e  2#11001011  8#377</PRE>
      <P><B>Строка</B> - это последовательность символов, заключенная в круглые 
      скобки. 
      <H3>Система координат.</H3>
      <P>Позиция элемента на странице описывается парой координат х,у. Каждое 
      выходное устройство имеет встроенную систему координат, с помощью которой 
      адресуются точки на странице. Эту систему будем называть пространством 
      устройства (device space). Оно отличается от устройства к устройству. Нет 
      единообразия в расположении начала координат, а также масштабов по 
      вертикальной и горизонтальной осям. </P>
      <P>Позиция на текущей PostScript-странице описывается в системе координат 
      пользователя (или в пространстве пользователя), которая не зависит от 
      пространства устройства. Координаты PostScript-программе перед печатью 
      текущей страницы автоматически преобразуются из пространства пользователя 
      в пространство устройства. Пространство пользователя таким образом 
      представляет систему координат, внутри которой страница может быть описана 
      независимо от конкретной машины, где эта страница будет напечатана. </P>
      <P>Пространство пользователя может быть изменено тремя способами:</P>
      <OL>
        <LI>начало его системы координат может быть перенесено в любую точку 
        пространства пользователя; 
        <LI>оси могут быть повернуты в любом направлении; 
        <LI>масштаб по каждой оси может быть произвольно изменен, т. е. может 
        быть задано любое линейное преобразование из пространства пользователя в 
        пространство устройства. </LI></OL>
      <H3>Постфиксная нотация (обратная польская запись).</H3>
      <P>Операции над данными в PostScript требуют, чтобы их операнды сначала 
      были помещены в стек. Такой стиль программирования, при котором операнды 
      задаются до операции над ними (оператора) называется постфиксной нотацией. 
      Так запись операции сложения двух чисел, допустим 4+5, в PostScript будет 
      выглядеть так: <PRE class=example>4 5 add </PRE>
      <H3>О гибкости языка.</H3>
      <P>Несмотря на большое количество встроенных операторов в PostScript нет 
      зарезервированных слов. Любое слово переопределяемо. Программа в 
      PostScript может рассматриваться как данные и это сближает его с языками 
      типа Лисп. 
      <H3>Переносимость программ.</H3>
      <P>Программы на PostScript записываются с использованием только печатаемых 
      символов кода ASCII, что позволяет обращаться с ними, как с обычными 
      файлами, т. е. не возникает никаких проблем при пересылке таких файлов по 
      сетям. 
      <H2>Стек и арифметические операции</H2>
      <P>Элементы данных в языке PostScript называются объектами (числа, 
      массивы, строки, символы). Над объектами можно производить различные 
      действия, но если в других языках объекты помещаются в переменные и 
      адресуются указанием имени переменной, то PostScript работает с данными 
      напрямую, используя механизм стека. 
      <H2>Занесение чисел в стек.</H2>
      <P>Любое число, появившееся в исходном файле PostScript-программы 
      заносится в стек. Например, строку: <PRE class=example> -8 10.4 +77 </PRE>
      <P>интерпретатор по мере ее чтения слева направо выполнит следующие 
      действия: 
      <OL>
        <LI>Заносит в стек число -8; перемещает указатель на следующую свободную 
        позицию. 
        <LI>Заносит в стек число 10.4; перемещает указатель на следующую позицию 
        и т. д. </LI></OL>
      <P>Стек будет иметь вид: <PRE class=example>   77
   10.4
   -8</PRE>
      <P>На вершине стека число 77 и оно может быть использовано первым в 
      какой-либо операции. Остальные числа используются в порядке обратном 
      порядку их занесения в стек. 
      <P>Таким же образом в стек могут быть занесены PostScript-объекты любого 
      вида: массивы, строки и такие экзотические объекты этого языка как 
      словари. 
      <P>Для упрощения объяснений рассмотрим сначала операции в стеке над 
      числами. Обратите внимание, что пробелы, символы табуляции и новой строки 
      являются в PostScript-программе разделителями объектов, другие символы 
      типа круглых и квадратных скобок в некоторых случаях также могут быть 
      разделителями. 
      <H2>Арифметические операторы</H2>
      <P>Оператор в PostScript - это слово, заставляющее интерпретатор выполнять 
      те или иные действия. Он эквивалентен командам или процедурам в других 
      языках программирования. Когда интерпретатор встречает слово в 
      PostScript-программе, он просматривает свой внутренний словарь и пытается 
      определить, является ли это слово именем оператора. Если оно в словаре 
      найдено, то выполняются все связанные с ним действия, а затем переходит к 
      следующему слову в исходном файле. 
      <P><B>add</B> и <B>sub</B>. Операторы смотрят находятся ли в стеке их 
      операнды. В общем случае оператор удаляет их из стека и помещает туда 
      результат выполнения своих действий. Например, оператор add (сложение) 
      удаляет из стека два верхних числа, складывает их и оставляет сумму в 
      стеке. Так строка программы, приведенная ниже, будет влиять на стек как 
      показано на рисунке. Аналогично работает оператор sub, вычитающий число, 
      находящееся в вершине стека, из числа, лежащего в стеке следующим. 
      <P>Другие арифметические операторы: 
      <P><B>div</B> - деление. Второе число делится на число в вершине стека. <PRE class=example>13 8 div   -&gt; 1.625 </PRE>
      <P><B>idiv</B> - целочисленное деление. <PRE class=example> 25 3 idiv -&gt; 8 </PRE>
      <P><B>mod</B> - второе число делится на число в вершине стека, сохраняя 
      остаток от деления. <PRE class=example> 7 5 mod   -&gt; 8 </PRE>
      <P>Операнды операторов mod и idiv должны быть целыми числами. 
      <P><B>mul</B> - перемножает два числа в вершине стека, помещая вместо них 
      их произведение. <PRE class=example>8 9 mul    -&gt; 72 </PRE>
      <P><B>neg</B> - изменяет знак числа, находящегося в вершине стека. <PRE class=example>-37 neg   -&gt; 37 </PRE>
      <H2>Запись арифметических выражений.</H2>
      <P>Выражение 5+(8/2) на языке PostScript можно представить несколькими 
      способами: <PRE class=example>      8
      2
     div
      5
     add</PRE>
      <P>либо <PRE class=example>    5
    8
    2
   div
   add</PRE>
      <P>Чуть более сложный случай, выражение 9-(4*7), можно записать минимум 
      двумя способами: <PRE class=example> 9 4 7 mul sub </PRE><PRE class=example> 4 7 mul 9 exch sub </PRE>
      <P>Во втором способе введен новый оператор <I>exch</I>. Он меняет местами 
      положение двух верхних чисел в вершине стека. 
      <P>Применение оператора <I>exch</I> вызвано тем, что <I>sub</I> вычитает 
      число в вершине стека из следующего за ним, что без <I>exch</I> приводит к 
      неверному порядку действий. 
      <H2>Действия над стеком.</H2>
      <P>Эта группа операторов, представителем которой был exch добавляет, 
      удаляет и изменяет порядок следования элементов в стеке. 
      <P><B>clear</B> очистка стека - удаляет из стека все элементы <PRE class=example>     а1...аn  clear  - </PRE><PRE class=example> 11 6 17 clear -&gt; - </PRE>
      <P><B>count</B> число элементов в стеке. <PRE class=example> a1...an count a1...an n </PRE>
      <P><B>dup</B> дублирует в стеке его верхний элемент <PRE class=example>  a1 dup a1 a1 </PRE><PRE class=example>   8 dup -&gt; 8 8 </PRE>
      <P><B>pop</B>удаляет из стека его верхний элемент <PRE class=example>  an...a2 a1 pop an...a2 </PRE><PRE class=example>     25 31 4 pop -&gt; 25 31</PRE>
      <P><B>roll</B> вращает элементы стека, из стека извлекаются два числа. 
      Верхнее говорит сколько раз и в каком направлении вращать элементы стека, 
      второе - сколько элементов вращать. <PRE class=example> 7 8 9 3  1 roll -&gt; 9 7 8 </PRE><PRE class=example> 7 8 9 3 -1 roll -&gt; 8 9 7 </PRE>
      <P><B>copy</B> дублирует n верхних элементов стеков <PRE class=example> a1...an n copy a1...an a1...an</PRE>
      <P>Существует еще ряд более специального вида операторов, работающих со 
      стеком, они будут рассмотрены по мере изложения. 
      <P>Ряд принтеров, например Apple LaserWriter, позволяет интерактивно с 
      ними взаимодействовать. Вот операторы для этого: 
      <P><B>==</B> удаляет элемент из вершины стека и отображает его на экране. 
      <P><B>Pstack</B> - печатает все содержимое стека, не изменяя его. 
      <P>Pstack и == являются полиморфными операторами, так как они в качестве 
      операндов принимают объекты многих типов. 
      <H2>Начала графики</H2>
      <P>Язык PostScript был разработан для получения графических изображений, 
      для этого у него имеется большой набор операторов. 
      <P>Рисование в PostScript начинается с конструирования пути на идеальной 
      поверхности, называемой текущей страницей. Путь - набор прямых и кривых 
      линий, определяющих область, которая будет заполнена, или траекторию, 
      которая будет нарисована на текущей странице. 
      <P>Конструируя путь, необходимо решить, что с ним делать: мы можем 
      нарисовать линию заданной толщины или заполнить его, чтобы создать 
      непрерывное изображение. 
      <P>После того, как заполнение текущей страницы закончено, ее можно 
      распечатать на физическом листе бумаги. 
      <P>Начнем с простой задачи: нарисуем вертикальную линию длиной 5" 
      (дюймов). Это выполнит следующая программа: <PRE class=example>           newpath
    144 72 moveto
   144 432 lineto
           stroke
   showpage  </PRE>
      <P>Разберем этот пример строка за строкой. Оператор <B>newpath</B> читает 
      текущую страницу и объявляет, что начато рисование новой страницы. 
      Конструирование пути начинается переносом воображаемого пера в заданную 
      точку. Это перо при его переносах не оставляет "следа" на бумаге. 
      Положение пера в каждый конкретный момент называется текущей точкой на 
      текущем пути. 
      <P>Оператор <B>movedo</B> переносит перо в точку, координаты которой 
      заданы его операндами. он извлекает из стека два числа и рассматривает их 
      как координаты х и у точки, которая становится текущей. 
      <P>В системе координат, принятой в PostScript по умолчанию, начало 
      координат находится в нижнем левом углу страницы. Координата х 
      увеличивается вправо, а у - при движении вверх. Единица длины в этой 
      системе равна 1/72 дюйма. Таким образом, оператор <B>moveto</B> переместит 
      текущую точку (на рисунке - точка А) на два дюйма вправо (144/78) и один 
      дюйм вверх (72/72). <PRE class=example>        y
       |
       |     .А
       |       x
       o--------&gt;  </PRE>
      <P>Оператор <B>lineto</B> добавит сегмент к текущему пути, нарисуя линию 
      между текущей точкой и точкой, координаты которой заданы его операндами, в 
      данном случае 144 и 432. Точка, заданная как операнд lineto становиться 
      текущей точкой. Обратите внимание, что lineto в действительности не рисует 
      ничего на текущей странице. Он просто добавляет сегмент линии к текущему 
      пути. Позже эту линию можно будет нарисовать, но это не происходит 
      автоматически. 
      <P>Оператор <B>stroke</B> вызывает рисование сконструированного нами пути 
      на текущей странице. Теперь этот путь становится видимой линией. 
      <P>И, наконец, оператор <B>showpage</B> печатает текущую страницу 
      (отправляет ее на печать). 
      <P>Таким образом можно выделить 3 этапа построения: 
      <OL>
        <LI>Конструирование пути (newpath, moveto, lineto); 
        <LI>нанесение его на текущую страницу (stroke); 
        <LI>вывод текущей страницы (showpage). </LI></OL>
      <P>Попробуйте написать программу, которая строит квадрат со стороной 1 см 
      (1 дюйм = 2.54 см). 
      <P class=date>15.11.2001 </P></TD></TR></TBODY></TABLE>
<CENTER>
<HR>

<HR width="50%">
©Фурашев А. 2002<BR><A href="mailto:psdraw@narod.ru">e-mail</A>
<HR width="25%">

<HR width="12%">
<!-- ><!-- "><!-- '><!-- --></TEXTAREA></FORM> </TITLE></COMMENT></A>
<DIV></DIV></SPAN></ILAYER></LAYER></IFRAME></NOFRAMES></STYLE></NOSCRIPT></TABLE></SCRIPT></APPLET></FONT>
<STYLE>#bn {
	DISPLAY: block
}
#bt {
	DISPLAY: block
}
</STYLE>

<SCRIPT language=JavaScript src="les1_files/163"></SCRIPT>
<!-- mailto:spm111@yandex.ru --></CENTER></BODY></HTML>
